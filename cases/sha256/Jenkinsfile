pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }

    parameters {
        string(name: 'HAXE_BRANCH', defaultValue: '', description: 'Haxe branch to build')
        string(name: 'HXB_ENABLED', defaultValue: '0', description: 'Haxe branch has hxb support')
    }

    environment {
        BENCHMARK_HAXE_PR = "${params.HAXE_BRANCH}"
        BENCHMARK_HAXE_HXB = "${params.HXB_ENABLED}"
    }

    stages {
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/HaxeBenchmarks/benchmark-runner.git']]])
            }
        }
        stage('run benchmark') {
            steps {
                echo 'run benchmark'
                sh '''
                    cd cases/sha256
                    ../../scripts/tools/setup-data.sh sha256
                    lix download
                    haxe run.hxml
                '''
            }
        }

        stage('trigger next benchmark') {
            steps {
                build job: 'Benchmark_sha512', parameters: [string(name: 'HAXE_BRANCH', value: env.BENCHMARK_HAXE_PR), string(name: 'HXB_ENABLED', value: env.BENCHMARK_HAXE_HXB)], wait: false
            }
        }
        stage('console output parsing') {
            steps {
                logParser projectRulePath: 'benchmark_log_parsing.txt', parsingRulesPath: '', showGraphs: true, useProjectRule: true
            }
        }
    }
    post { 
        failure { 
            emailext attachLog: true, body: '', subject: '[Haxe-Benchmarks SHA256] failed build job', to: 'jenkins'
        }
    }
}
